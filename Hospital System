#include <iostream>
#include <fstream>
#include <string>
#include <cstdio>

struct Node {
    std::string FirstName, MiddleName, Surname;
    int Age;
    float Height, Weight;
    Node* Next;

    Node(std::string firstName, std::string middleName, std::string surname, int age, float height, float weight)
        : FirstName(firstName), MiddleName(middleName), Surname(surname), Age(age), Height(height), Weight(weight), Next(nullptr) {}
};

Node* AddRecord(Node* head, std::string firstName, std::string middleName, std::string surname, int age, float height, float weight);
Node* UpdateRecord(Node* head, std::string targetSurname);
void ViewPatientRecords(Node* head);
void SaveToFile(Node* head, std::string filename);
void LoadFromFile(Node*& head, std::string filename);
void DeleteFile(std::string filename);
void DisplayMenu(Node*& head);

int main() {
    Node* head = nullptr;
    DisplayMenu(head);
    return 0;
}

Node* AddRecord(Node* head, std::string firstName, std::string middleName, std::string surname, int age, float height, float weight) {
    Node* newNode = new Node(firstName, middleName, surname, age, height, weight);
    if (head == nullptr) {
        head = newNode;
    }
    else {
        Node* temp = head;
        while (temp->Next != nullptr) {
            temp = temp->Next;
        }
        temp->Next = newNode;
    }
    std::cout << "\nRecord added successfully." << std::endl;
    return head;
}

Node* UpdateRecord(Node* head, std::string targetSurname) {
    Node* current = head;
    bool found = false;
    while (current != nullptr) {
        if (current->Surname == targetSurname) {
            found = true;
            std::cout << "\nWhat information do you want to update for patient " << targetSurname << "?" << std::endl;
            std::cout << "1. First Name" << std::endl;
            std::cout << "2. Middle Name" << std::endl;
            std::cout << "3. Surname" << std::endl;
            std::cout << "4. Age" << std::endl;
            std::cout << "5. Height" << std::endl;
            std::cout << "6. Weight" << std::endl;
            int choice;
            std::cout << "\nEnter your choice (1-6): ";
            std::cin >> choice;
            switch (choice) {
            case 1:
                std::cout << "Enter new first name: ";
                std::cin >> current->FirstName;
                break;
            case 2:
                std::cout << "Enter new middle name: ";
                std::cin >> current->MiddleName;
                break;
            case 3:
                std::cout << "Enter new surname: ";
                std::cin >> current->Surname;
                break;
            case 4:
                std::cout << "Enter new age: ";
                std::cin >> current->Age;
                break;
            case 5:
                std::cout << "Enter new height: ";
                std::cin >> current->Height;
                break;
            case 6:
                std::cout << "Enter new weight: ";
                std::cin >> current->Weight;
                break;
            default:
                std::cout << "Invalid choice!" << std::endl;
                break;
            }
            std::cout << "\nRecord updated successfully!" << std::endl;
            break;
        }
        current = current->Next;
    }
    if (!found) {
        std::cout << "\nNo record found with the specified surname." << std::endl;
    }
    return head;
}

void ViewPatientRecords(Node* head) {
    if (head == nullptr) {
        std::cout << "\nNo records found." << std::endl;
        return;
    }
    Node* temp = head;
    while (temp != nullptr) {
        std::cout << "Name: " << temp->FirstName << " " << temp->MiddleName << " " << temp->Surname << ", Age: " << temp->Age << ", Height: " << temp->Height << " cm, Weight: " << temp->Weight << " lb" << std::endl;
        temp = temp->Next;
    }
}

void SaveToFile(Node* head, std::string filename) {
    std::ofstream file(filename);
    if (!file) {
        std::cout << "\nError opening file." << std::endl;
        return;
    }
    Node* temp = head;
    while (temp != nullptr) {
        file << temp->FirstName << " " << temp->MiddleName << " " << temp->Surname << " " << temp->Age << " " << temp->Height << " " << temp->Weight << std::endl;
        temp = temp->Next;
    }
    file.close();
    std::cout << "\nRecords saved to " << filename << " successfully." << std::endl;
}

void LoadFromFile(Node*& head, std::string filename) {
    std::ifstream file(filename);
    if (!file) {
        std::cout << "\nError opening file." << std::endl;
        return;
    }
    std::string firstName, middleName, surname;
    int age;
    float height, weight;
    while (file >> firstName >> middleName >> surname >> age >> height >> weight) {
        head = AddRecord(head, firstName, middleName, surname, age, height, weight);
    }
    file.close();
    std::cout << "\nRecords loaded from " << filename << " successfully." << std::endl;
}

void DeleteFile(std::string filename) {
    if (std::remove(filename.c_str()) != 0) {
        std::cout << "\nError deleting file." << std::endl;
    }
    else {
        std::cout << "\nFile " << filename << " deleted successfully." << std::endl;
    }
}

void DisplayMenu(Node*& head) {
    int choice;
    while (true) {
        system("cls");
        std::cout << "\n===========================";
        std::cout << "\n    Uprising Hospital";
        std::cout << "\n       Patient Menu";
        std::cout << "\n===========================" << std::endl;
        std::cout << "\n1. Add Patient Record" << std::endl;
        std::cout << "2. Update Patient Record" << std::endl;
        std::cout << "3. View Patient Records" << std::endl;
        std::cout << "4. Save Patient File" << std::endl;
        std::cout << "5. Load Patient File" << std::endl;
        std::cout << "6. Delete Patient File" << std::endl;
        std::cout << "7. Exit" << std::endl;
        std::cout << "\nEnter your choice: ";
        std::cin >> choice;

        switch (choice) {
        case 1: {
            std::string firstName, middleName, surname;
            int age;
            float height, weight; 
            std::cout << "\nEnter patient's first name: ";
            std::cin >> firstName;
            std::cout << "Enter patient's middle name: ";
            std::cin >> middleName;
            std::cout << "Enter patient's surname: ";
            std::cin >> surname;
            std::cout << "Enter patient's age: ";
            std::cin >> age;
            std::cout << "Enter patient's height in cm: ";
            std::cin >> height;
            std::cout << "Enter patient's weight in lb: ";
            std::cin >> weight; 
            head = AddRecord(head, firstName, middleName, surname, age, height, weight); 
            break;
        }
        case 2: {
            std::string targetSurname;
            std::cout << "\nEnter the surname of the patient to update: ";
            std::cin >> targetSurname;
            head = UpdateRecord(head, targetSurname);
            break;
        }
        case 3:
            ViewPatientRecords(head);
            break;
        case 4: {
            std::string filename;
            std::cout << "\nEnter filename to save: ";
            std::cin >> filename;
            SaveToFile(head, filename);
            break;
        }
        case 5: {
            std::string filename;
            std::cout << "\nEnter filename to load: ";
            std::cin >> filename;
            LoadFromFile(head, filename);
            break;
        }
        case 6: {
            std::string filename;
            std::cout << "\nEnter filename to delete: ";
            std::cin >> filename;
            DeleteFile(filename);
            break;
        }
        case 7:
            std::cout << "\nExiting program." << std::endl;
            return;
        default:
            std::cout << "\nInvalid choice!" << std::endl;
            break;
        }
        std::cout << "\nPress Enter to continue...";
        std::cin.ignore();
        std::cin.get();
    }
}
